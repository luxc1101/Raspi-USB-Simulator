# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QMessageBox
from sqlalchemy import false
from Config import Ui_ConfigDialog
from PyQt5.QtCore import pyqtSignal, QThread
from pywinauto.application import Application
import sys
import Icons
import time


class Ui_MainWindow(QMainWindow):
    Putty = None
    Logging = None

    def configWin(self):
        self.Confwin = QtWidgets.QDialog()
        self.ui = Ui_ConfigDialog()
        self.ui.setupUi(self.Confwin)
        self.Confwin.show()
        self.ui.my_signal.connect(self.PuTTYLogin)

    def setupUi(self, MainWindow):
        # self.configWin()
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(340, 330)
        MainWindow.setWindowIcon(QtGui.QIcon(":/Image/AppIcon.png"))
###########################################################################
        self.centralWidget = QtWidgets.QWidget(MainWindow)
        self.centralWidget.setObjectName("centralWidget")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.centralWidget)
        self.gridLayout_4.setContentsMargins(11, 11, 11, 11)
        self.gridLayout_4.setSpacing(6)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.groupBox_mtfs = QtWidgets.QGroupBox(self.centralWidget)
        self.groupBox_mtfs.setObjectName("groupBox_mtfs")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.groupBox_mtfs)
        self.gridLayout_2.setContentsMargins(11, 11, 11, 11)
        self.gridLayout_2.setSpacing(6)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout_3 = QtWidgets.QGridLayout()
        self.gridLayout_3.setSpacing(6)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.formLayout = QtWidgets.QFormLayout()
        self.formLayout.setSpacing(6)
        self.formLayout.setObjectName("formLayout")
        self.LB_Filesystem = QtWidgets.QLabel(self.groupBox_mtfs)
        self.LB_Filesystem.setObjectName("LB_Filesystem")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.LB_Filesystem)
        self.comboBox = QtWidgets.QComboBox(self.groupBox_mtfs)
        self.comboBox.setObjectName("comboBox")
        for _ in range(11):
            self.comboBox.addItem("")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.comboBox)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setSpacing(6)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.LB_Img = QtWidgets.QLabel(self.groupBox_mtfs)
        self.LB_Img.setAlignment(QtCore.Qt.AlignCenter)
        self.LB_Img.setObjectName("LB_Img")
        self.horizontalLayout.addWidget(self.LB_Img)
        self.LB_WaDo = QtWidgets.QLabel(self.groupBox_mtfs)
        self.LB_WaDo.setAlignment(QtCore.Qt.AlignCenter)
        self.LB_WaDo.setObjectName("LB_WaDo")
        self.horizontalLayout.addWidget(self.LB_WaDo)
        self.LB_Samba = QtWidgets.QLabel(self.groupBox_mtfs)
        self.LB_Samba.setAlignment(QtCore.Qt.AlignCenter)
        self.LB_Samba.setObjectName("LB_Samba")
        self.horizontalLayout.addWidget(self.LB_Samba)
        self.formLayout.setLayout(1, QtWidgets.QFormLayout.FieldRole, self.horizontalLayout)
        self.LB_Status = QtWidgets.QLabel(self.groupBox_mtfs)
        self.LB_Status.setObjectName("LB_Status")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.LB_Status)
        self.gridLayout_3.addLayout(self.formLayout, 0, 0, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout_3, 0, 0, 1, 1)
        self.gridLayout_4.addWidget(self.groupBox_mtfs, 0, 0, 1, 1)
        self.groupBox_trace = QtWidgets.QGroupBox(self.centralWidget)
        self.groupBox_trace.setObjectName("groupBox_trace")
        self.gridLayout = QtWidgets.QGridLayout(self.groupBox_trace)
        self.gridLayout.setContentsMargins(11, 11, 11, 11)
        self.gridLayout.setSpacing(6)
        self.gridLayout.setObjectName("gridLayout")
        self.textEdit_trace = QtWidgets.QTextEdit(self.groupBox_trace,readOnly= True)
        self.textEdit_trace.setPlaceholderText("Putty's output is shown here" )
        self.textEdit_trace.setObjectName("textEdit_trace")
        self.gridLayout.addWidget(self.textEdit_trace, 0, 0, 1, 1)
        self.gridLayout_4.addWidget(self.groupBox_trace, 1, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralWidget)
        self.menuBar = QtWidgets.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 342, 21))
        self.menuBar.setObjectName("menuBar")
        self.menuCalls = QtWidgets.QMenu(self.menuBar)
        self.menuCalls.setObjectName("menuCalls")
        MainWindow.setMenuBar(self.menuBar)
        self.mainToolBar = QtWidgets.QToolBar(MainWindow)
        self.mainToolBar.setEnabled(True)
        self.mainToolBar.setObjectName("mainToolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.mainToolBar)
        self.statusBar = QtWidgets.QStatusBar(MainWindow)
        self.statusBar.setObjectName("statusBar")
        MainWindow.setStatusBar(self.statusBar)
        self.actionAnpassen = QtWidgets.QAction(MainWindow)
        self.actionAnpassen.setEnabled(True)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/Image/AnpassenIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAnpassen.setIcon(icon)
        self.actionAnpassen.setObjectName("actionAnpassen")
        self.actionQuit = QtWidgets.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/Image/putty-exit.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionQuit.setIcon(icon1)
        self.actionQuit.setObjectName("actionQuit")
        self.actionEject = QtWidgets.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/Image/disconnect.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionEject.setIcon(icon2)
        self.actionEject.setObjectName("actionEject")
        self.actionMount = QtWidgets.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/Image/connect.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionMount.setIcon(icon3)
        self.actionMount.setObjectName("actionMount")
        self.actionClear = QtWidgets.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/Image/clear.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionClear.setIcon(icon4)
        self.actionClear.setObjectName("actionClear")
        self.menuCalls.addAction(self.actionAnpassen)
        self.menuCalls.addAction(self.actionMount)
        self.menuCalls.addAction(self.actionEject)
        self.menuCalls.addAction(self.actionClear)
        self.menuCalls.addAction(self.actionQuit)
        self.menuBar.addAction(self.menuCalls.menuAction())
        self.mainToolBar.addAction(self.actionAnpassen)
        self.mainToolBar.addAction(self.actionMount)
        self.mainToolBar.addAction(self.actionEject)
        self.mainToolBar.addAction(self.actionClear)
        self.mainToolBar.addAction(self.actionQuit)

###########################################################################
        self.actionMount.setEnabled(False)
        self.actionEject.setEnabled(False)
        self.actionQuit.setEnabled(False)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.actionAnpassen.triggered.connect(self.configWin)
        self.actionMount.triggered.connect(self.Tracedata)
        self.actionEject.triggered.connect(self.Eject)
        self.actionQuit.triggered.connect(self.PuTTYExit)
        self.actionClear.triggered.connect(self.TraceClear)

        self.thread = {}
        


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "USB Simulator"))
        self.groupBox_mtfs.setTitle(_translate("MainWindow", "Mount Filesystem"))
        self.LB_Filesystem.setText(_translate("MainWindow", "Filesystem"))
        self.comboBox.setItemText(0, _translate("MainWindow", "MIB Compliance Media"))
        self.comboBox.setItemText(1, _translate("MainWindow", "ext2"))
        self.comboBox.setItemText(2, _translate("MainWindow", "ext3"))
        self.comboBox.setItemText(3, _translate("MainWindow", "ext4"))
        self.comboBox.setItemText(4, _translate("MainWindow", "fat16"))
        self.comboBox.setItemText(5, _translate("MainWindow", "fat32"))
        self.comboBox.setItemText(6, _translate("MainWindow", "ntfs"))
        self.comboBox.setItemText(7, _translate("MainWindow", "exfat"))
        self.comboBox.setItemText(8, _translate("MainWindow", "hfsplus"))
        self.comboBox.setItemText(9, _translate("MainWindow", "partitions"))
        self.comboBox.setItemText(10, _translate("MainWindow", "Software update"))
        self.LB_Img.setText(_translate("MainWindow", "Img"))
        self.LB_WaDo.setText(_translate("MainWindow", "Watchdog"))
        self.LB_Samba.setText(_translate("MainWindow", "Samba"))
        self.LB_Status.setText(_translate("MainWindow", "Status"))
        self.groupBox_trace.setTitle(_translate("MainWindow", "Trace"))
        self.menuCalls.setTitle(_translate("MainWindow", "Calls"))
        self.actionAnpassen.setText(_translate("MainWindow", "Anpassen"))
        self.actionQuit.setText(_translate("MainWindow", "Quit"))
        self.actionEject.setText(_translate("MainWindow", "Eject"))
        self.actionMount.setText(_translate("MainWindow", "Mount"))
        self.actionClear.setText(_translate("MainWindow", "Clear"))

    def PuTTYLogin(self, param):
        print(param)
        app = Application().start(
            r"{} -ssh pi@{}".format(param["PuTTY_Path"], param["IP"]))
        time.sleep(2)
        PT = app.PuTTY
        self.Putty = PT
        self.Logging = param["Log"]
        PT_sec_alert = app.PuTTYSecurityAlert
        if PT_sec_alert.exists():
            PT_sec_alert.Yes.click()
            # PT_sec_alert.No.click()
            # PT_sec_alert.Cancel.click()
        time.sleep(2)
        self.Putty.send_keystrokes(param["Key"])
        self.Putty.send_keystrokes("{ENTER}")
        self.Putty.send_keystrokes("ls")
        self.Putty.send_keystrokes("{ENTER}")
        self.actionMount.setEnabled(True)
        self.actionQuit.setEnabled(True)

    def PuTTYExit(self):
        try:
            self.Putty.send_keystrokes("exit")
            self.Putty.send_keystrokes("{ENTER}")
        except:
            QMessageBox.information(self, 'Info', 'please exicute putty first')

    def TraceClear(self):
        self.textEdit_trace.clear()
    
    def Update_logging(self,msg):
        self.textEdit_trace.append(msg)

    def Tracedata(self):
        self.actionEject.setEnabled(True)
        self.actionMount.setEnabled(False)
        self.thread[1] = TraceThread(parent=None, Logfile=self.Logging, sleep_time_in_seconds=1)
        # self.textEdit_trace.clear()
        self.thread[1].start()
        self.thread[1].trace_singal.connect(self.Update_logging)

    
    def Eject(self):
        self.thread[1].stop()
        self.actionEject.setEnabled(False)
        self.actionMount.setEnabled(True)
        self.Putty.send_keystrokes("sudo /sbin/modprobe g_multi -r")
        self.Putty.send_keystrokes("{ENTER}")



#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++                                                 
#                   Thread Class                   
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++                                                 
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

class TraceThread(QThread):
    '''
    read data from log file and send data to trace window of Main window class
    '''
    trace_singal = pyqtSignal(str)
    def __init__(self, parent, Logfile, sleep_time_in_seconds):
        super(TraceThread, self).__init__(parent)
        self.Logfile = Logfile
        print("thread:" + self.Logfile)
        self.sleep_time_in_seconds = sleep_time_in_seconds

    def run(self):
        try:
            with open(self.Logfile, 'r', errors='ignore') as f:
                while True:
                    for line in f:
                        if line:
                            self.trace_singal.emit(line.strip()) 
                            # do whatever you want to do on the line
                    time.sleep(self.sleep_time_in_seconds)
        except IOError as e:
            line = 'Cannot open the file {}. Error: {}'.format(self.Logfile, e)
            self.trace_singal.emit(line)

    def stop(self):
        self.terminate() 












if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
